#!/bin/sh
# Copyright (c) 2023 Lajos Koszti

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


IN_GIT_DIR=0

is_inside_git_dir() {
  if [ $IN_GIT_DIR -eq 1 ]; then
    return 0
  fi

  git rev-parse --is-inside-git-dir > /dev/null 2>&1
  return $?
}

get_current_branch() {
  git rev-parse --abbrev-ref HEAD
}

get_git_dir() {
  if ! is_inside_git_dir; then
    echo "Not inside a git repository" >&2
    return 1
  fi

  git rev-parse --git-dir
}

get_brhist_file_path() {
  echo "$(get_git_dir)/.git-brhist"
}
get_n_branch() {
  tail -n $1 "$(get_brhist_file_path)" | head -n 1
}

get_last_branch() {
  get_n_branch 1
}

save_hist_item() {
  if [ ! -f "$(get_brhist_file_path)" ]; then
    touch "$(get_brhist_file_path)"
  fi
  if [ "$(get_current_branch)" = "$(get_last_branch)" ]; then
    return
  fi
  get_current_branch >> "$(get_brhist_file_path)"
}

checkout_previous() {
  if [ $# -eq 1 ]; then
    git checkout $1
    return
  fi
  if [ ! -f "$(get_brhist_file_path)" ]; then
    echo "No history file found" >&2
    return 1
  fi

  local new_branch
  new_branch="$(get_n_branch 2)"

  if [ "$new_branch" = "$get_current_branch" ];then
    return
  fi
  git checkout "$(get_n_branch 2)"
}

checkout_previous_n() {
  local new_branch
  new_branch="$(get_n_branch $1)"
  if [ "$new_branch" = "$get_current_branch" ];then
    return
  fi
  git checkout "$new_branch"
}

list() {
  cat "$(get_brhist_file_path)"
}

# removes duplicate entries
compact_history() {
  if [ ! -f "$(get_brhist_file_path)" ];then
    return
  fi
  local tmpfile
  tmpfile="$(mktemp)"
  awk '!x[$0]++' "$(get_brhist_file_path)" > "$tmpfile"
  mv $tmpfile "$(get_brhist_file_path)"
}

truncate_history() {
  if [ ! -f "$(get_brhist_file_path)" ];then
    return
  fi
  local tmpfile
  tmpfile="$(mktemp)"
  tail -n $1 "$(get_brhist_file_path)" > "$tmpfile"
  mv $tmpfile "$(get_brhist_file_path)"
}

help() {
  echo "Usage: git-branch-history {save|s|previous|p|previous-n|n|list|ls}"
}

while [ $# -gt 0 ];do
  case "$1" in
    "-g")
      IN_GIT_DIR=1
      ;;
    save|s)
      save_hist_item
      ;;
    previous|p)
      checkout_previous
      ;;
    previous-n|n)
      checkout_previous_n $2
      ;;
    list|ls)
      list
      ;;
    compact)
      compact_history
      ;;
    truncate)
      truncate_history $2
      ;;
    help|h)
      help
      ;;
    *)
      help >&2
      exit 1
  esac
  shift
done

# vi: ft=sh
